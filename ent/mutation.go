// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/LintaoAmons/undercontrol/ent/account"
	"github.com/LintaoAmons/undercontrol/ent/accounthistory"
	"github.com/LintaoAmons/undercontrol/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount        = "Account"
	TypeAccountHistory = "AccountHistory"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	amount                *string
	currency_code         *string
	created_at            *time.Time
	created_by            *string
	updated_at            *time.Time
	updated_by            *string
	clearedFields         map[string]struct{}
	accounthistory        map[int]struct{}
	removedaccounthistory map[int]struct{}
	clearedaccounthistory bool
	done                  bool
	oldValue              func(context.Context) (*Account, error)
	predicates            []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AccountMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AccountMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AccountMutation) ResetName() {
	m.name = nil
}

// SetAmount sets the "amount" field.
func (m *AccountMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *AccountMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAmount(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *AccountMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[account.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *AccountMutation) AmountCleared() bool {
	_, ok := m.clearedFields[account.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *AccountMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, account.FieldAmount)
}

// SetCurrencyCode sets the "currency_code" field.
func (m *AccountMutation) SetCurrencyCode(s string) {
	m.currency_code = &s
}

// CurrencyCode returns the value of the "currency_code" field in the mutation.
func (m *AccountMutation) CurrencyCode() (r string, exists bool) {
	v := m.currency_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyCode returns the old "currency_code" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCurrencyCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyCode: %w", err)
	}
	return oldValue.CurrencyCode, nil
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (m *AccountMutation) ClearCurrencyCode() {
	m.currency_code = nil
	m.clearedFields[account.FieldCurrencyCode] = struct{}{}
}

// CurrencyCodeCleared returns if the "currency_code" field was cleared in this mutation.
func (m *AccountMutation) CurrencyCodeCleared() bool {
	_, ok := m.clearedFields[account.FieldCurrencyCode]
	return ok
}

// ResetCurrencyCode resets all changes to the "currency_code" field.
func (m *AccountMutation) ResetCurrencyCode() {
	m.currency_code = nil
	delete(m.clearedFields, account.FieldCurrencyCode)
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AccountMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[account.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AccountMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[account.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, account.FieldCreatedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *AccountMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *AccountMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *AccountMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[account.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *AccountMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[account.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *AccountMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, account.FieldCreatedBy)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AccountMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[account.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AccountMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[account.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, account.FieldUpdatedAt)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *AccountMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *AccountMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *AccountMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[account.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *AccountMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[account.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *AccountMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, account.FieldUpdatedBy)
}

// AddAccounthistoryIDs adds the "accounthistory" edge to the AccountHistory entity by ids.
func (m *AccountMutation) AddAccounthistoryIDs(ids ...int) {
	if m.accounthistory == nil {
		m.accounthistory = make(map[int]struct{})
	}
	for i := range ids {
		m.accounthistory[ids[i]] = struct{}{}
	}
}

// ClearAccounthistory clears the "accounthistory" edge to the AccountHistory entity.
func (m *AccountMutation) ClearAccounthistory() {
	m.clearedaccounthistory = true
}

// AccounthistoryCleared reports if the "accounthistory" edge to the AccountHistory entity was cleared.
func (m *AccountMutation) AccounthistoryCleared() bool {
	return m.clearedaccounthistory
}

// RemoveAccounthistoryIDs removes the "accounthistory" edge to the AccountHistory entity by IDs.
func (m *AccountMutation) RemoveAccounthistoryIDs(ids ...int) {
	if m.removedaccounthistory == nil {
		m.removedaccounthistory = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.accounthistory, ids[i])
		m.removedaccounthistory[ids[i]] = struct{}{}
	}
}

// RemovedAccounthistory returns the removed IDs of the "accounthistory" edge to the AccountHistory entity.
func (m *AccountMutation) RemovedAccounthistoryIDs() (ids []int) {
	for id := range m.removedaccounthistory {
		ids = append(ids, id)
	}
	return
}

// AccounthistoryIDs returns the "accounthistory" edge IDs in the mutation.
func (m *AccountMutation) AccounthistoryIDs() (ids []int) {
	for id := range m.accounthistory {
		ids = append(ids, id)
	}
	return
}

// ResetAccounthistory resets all changes to the "accounthistory" edge.
func (m *AccountMutation) ResetAccounthistory() {
	m.accounthistory = nil
	m.clearedaccounthistory = false
	m.removedaccounthistory = nil
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, account.FieldName)
	}
	if m.amount != nil {
		fields = append(fields, account.FieldAmount)
	}
	if m.currency_code != nil {
		fields = append(fields, account.FieldCurrencyCode)
	}
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, account.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, account.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldName:
		return m.Name()
	case account.FieldAmount:
		return m.Amount()
	case account.FieldCurrencyCode:
		return m.CurrencyCode()
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldCreatedBy:
		return m.CreatedBy()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	case account.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldName:
		return m.OldName(ctx)
	case account.FieldAmount:
		return m.OldAmount(ctx)
	case account.FieldCurrencyCode:
		return m.OldCurrencyCode(ctx)
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case account.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case account.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case account.FieldCurrencyCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyCode(v)
		return nil
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case account.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldAmount) {
		fields = append(fields, account.FieldAmount)
	}
	if m.FieldCleared(account.FieldCurrencyCode) {
		fields = append(fields, account.FieldCurrencyCode)
	}
	if m.FieldCleared(account.FieldCreatedAt) {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.FieldCleared(account.FieldCreatedBy) {
		fields = append(fields, account.FieldCreatedBy)
	}
	if m.FieldCleared(account.FieldUpdatedAt) {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.FieldCleared(account.FieldUpdatedBy) {
		fields = append(fields, account.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldAmount:
		m.ClearAmount()
		return nil
	case account.FieldCurrencyCode:
		m.ClearCurrencyCode()
		return nil
	case account.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case account.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case account.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case account.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldName:
		m.ResetName()
		return nil
	case account.FieldAmount:
		m.ResetAmount()
		return nil
	case account.FieldCurrencyCode:
		m.ResetCurrencyCode()
		return nil
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case account.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.accounthistory != nil {
		edges = append(edges, account.EdgeAccounthistory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case account.EdgeAccounthistory:
		ids := make([]ent.Value, 0, len(m.accounthistory))
		for id := range m.accounthistory {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedaccounthistory != nil {
		edges = append(edges, account.EdgeAccounthistory)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case account.EdgeAccounthistory:
		ids := make([]ent.Value, 0, len(m.removedaccounthistory))
		for id := range m.removedaccounthistory {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaccounthistory {
		edges = append(edges, account.EdgeAccounthistory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	switch name {
	case account.EdgeAccounthistory:
		return m.clearedaccounthistory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	switch name {
	case account.EdgeAccounthistory:
		m.ResetAccounthistory()
		return nil
	}
	return fmt.Errorf("unknown Account edge %s", name)
}

// AccountHistoryMutation represents an operation that mutates the AccountHistory nodes in the graph.
type AccountHistoryMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	amount         *string
	currency_code  *string
	created_at     *time.Time
	created_by     *string
	updated_at     *time.Time
	updated_by     *string
	clearedFields  map[string]struct{}
	account        *int
	clearedaccount bool
	done           bool
	oldValue       func(context.Context) (*AccountHistory, error)
	predicates     []predicate.AccountHistory
}

var _ ent.Mutation = (*AccountHistoryMutation)(nil)

// accounthistoryOption allows management of the mutation configuration using functional options.
type accounthistoryOption func(*AccountHistoryMutation)

// newAccountHistoryMutation creates new mutation for the AccountHistory entity.
func newAccountHistoryMutation(c config, op Op, opts ...accounthistoryOption) *AccountHistoryMutation {
	m := &AccountHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeAccountHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountHistoryID sets the ID field of the mutation.
func withAccountHistoryID(id int) accounthistoryOption {
	return func(m *AccountHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *AccountHistory
		)
		m.oldValue = func(ctx context.Context) (*AccountHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AccountHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccountHistory sets the old AccountHistory of the mutation.
func withAccountHistory(node *AccountHistory) accounthistoryOption {
	return func(m *AccountHistoryMutation) {
		m.oldValue = func(context.Context) (*AccountHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AccountHistory entities.
func (m *AccountHistoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AccountHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AccountHistoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AccountHistoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AccountHistoryMutation) ResetName() {
	m.name = nil
}

// SetAmount sets the "amount" field.
func (m *AccountHistoryMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *AccountHistoryMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldAmount(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *AccountHistoryMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[accounthistory.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *AccountHistoryMutation) AmountCleared() bool {
	_, ok := m.clearedFields[accounthistory.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *AccountHistoryMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, accounthistory.FieldAmount)
}

// SetCurrencyCode sets the "currency_code" field.
func (m *AccountHistoryMutation) SetCurrencyCode(s string) {
	m.currency_code = &s
}

// CurrencyCode returns the value of the "currency_code" field in the mutation.
func (m *AccountHistoryMutation) CurrencyCode() (r string, exists bool) {
	v := m.currency_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyCode returns the old "currency_code" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldCurrencyCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyCode: %w", err)
	}
	return oldValue.CurrencyCode, nil
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (m *AccountHistoryMutation) ClearCurrencyCode() {
	m.currency_code = nil
	m.clearedFields[accounthistory.FieldCurrencyCode] = struct{}{}
}

// CurrencyCodeCleared returns if the "currency_code" field was cleared in this mutation.
func (m *AccountHistoryMutation) CurrencyCodeCleared() bool {
	_, ok := m.clearedFields[accounthistory.FieldCurrencyCode]
	return ok
}

// ResetCurrencyCode resets all changes to the "currency_code" field.
func (m *AccountHistoryMutation) ResetCurrencyCode() {
	m.currency_code = nil
	delete(m.clearedFields, accounthistory.FieldCurrencyCode)
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountHistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountHistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AccountHistoryMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[accounthistory.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AccountHistoryMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[accounthistory.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, accounthistory.FieldCreatedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *AccountHistoryMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *AccountHistoryMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldCreatedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *AccountHistoryMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[accounthistory.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *AccountHistoryMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[accounthistory.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *AccountHistoryMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, accounthistory.FieldCreatedBy)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountHistoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountHistoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AccountHistoryMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[accounthistory.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AccountHistoryMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[accounthistory.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountHistoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, accounthistory.FieldUpdatedAt)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *AccountHistoryMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *AccountHistoryMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the AccountHistory entity.
// If the AccountHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountHistoryMutation) OldUpdatedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *AccountHistoryMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[accounthistory.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *AccountHistoryMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[accounthistory.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *AccountHistoryMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, accounthistory.FieldUpdatedBy)
}

// SetAccountID sets the "account" edge to the Account entity by id.
func (m *AccountHistoryMutation) SetAccountID(id int) {
	m.account = &id
}

// ClearAccount clears the "account" edge to the Account entity.
func (m *AccountHistoryMutation) ClearAccount() {
	m.clearedaccount = true
}

// AccountCleared reports if the "account" edge to the Account entity was cleared.
func (m *AccountHistoryMutation) AccountCleared() bool {
	return m.clearedaccount
}

// AccountID returns the "account" edge ID in the mutation.
func (m *AccountHistoryMutation) AccountID() (id int, exists bool) {
	if m.account != nil {
		return *m.account, true
	}
	return
}

// AccountIDs returns the "account" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccountID instead. It exists only for internal usage by the builders.
func (m *AccountHistoryMutation) AccountIDs() (ids []int) {
	if id := m.account; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccount resets all changes to the "account" edge.
func (m *AccountHistoryMutation) ResetAccount() {
	m.account = nil
	m.clearedaccount = false
}

// Where appends a list predicates to the AccountHistoryMutation builder.
func (m *AccountHistoryMutation) Where(ps ...predicate.AccountHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AccountHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AccountHistory).
func (m *AccountHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountHistoryMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, accounthistory.FieldName)
	}
	if m.amount != nil {
		fields = append(fields, accounthistory.FieldAmount)
	}
	if m.currency_code != nil {
		fields = append(fields, accounthistory.FieldCurrencyCode)
	}
	if m.created_at != nil {
		fields = append(fields, accounthistory.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, accounthistory.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, accounthistory.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, accounthistory.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accounthistory.FieldName:
		return m.Name()
	case accounthistory.FieldAmount:
		return m.Amount()
	case accounthistory.FieldCurrencyCode:
		return m.CurrencyCode()
	case accounthistory.FieldCreatedAt:
		return m.CreatedAt()
	case accounthistory.FieldCreatedBy:
		return m.CreatedBy()
	case accounthistory.FieldUpdatedAt:
		return m.UpdatedAt()
	case accounthistory.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accounthistory.FieldName:
		return m.OldName(ctx)
	case accounthistory.FieldAmount:
		return m.OldAmount(ctx)
	case accounthistory.FieldCurrencyCode:
		return m.OldCurrencyCode(ctx)
	case accounthistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case accounthistory.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case accounthistory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case accounthistory.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown AccountHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accounthistory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case accounthistory.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case accounthistory.FieldCurrencyCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyCode(v)
		return nil
	case accounthistory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case accounthistory.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case accounthistory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case accounthistory.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown AccountHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountHistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountHistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AccountHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(accounthistory.FieldAmount) {
		fields = append(fields, accounthistory.FieldAmount)
	}
	if m.FieldCleared(accounthistory.FieldCurrencyCode) {
		fields = append(fields, accounthistory.FieldCurrencyCode)
	}
	if m.FieldCleared(accounthistory.FieldCreatedAt) {
		fields = append(fields, accounthistory.FieldCreatedAt)
	}
	if m.FieldCleared(accounthistory.FieldCreatedBy) {
		fields = append(fields, accounthistory.FieldCreatedBy)
	}
	if m.FieldCleared(accounthistory.FieldUpdatedAt) {
		fields = append(fields, accounthistory.FieldUpdatedAt)
	}
	if m.FieldCleared(accounthistory.FieldUpdatedBy) {
		fields = append(fields, accounthistory.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountHistoryMutation) ClearField(name string) error {
	switch name {
	case accounthistory.FieldAmount:
		m.ClearAmount()
		return nil
	case accounthistory.FieldCurrencyCode:
		m.ClearCurrencyCode()
		return nil
	case accounthistory.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case accounthistory.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case accounthistory.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case accounthistory.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown AccountHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountHistoryMutation) ResetField(name string) error {
	switch name {
	case accounthistory.FieldName:
		m.ResetName()
		return nil
	case accounthistory.FieldAmount:
		m.ResetAmount()
		return nil
	case accounthistory.FieldCurrencyCode:
		m.ResetCurrencyCode()
		return nil
	case accounthistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case accounthistory.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case accounthistory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case accounthistory.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown AccountHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.account != nil {
		edges = append(edges, accounthistory.EdgeAccount)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountHistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case accounthistory.EdgeAccount:
		if id := m.account; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaccount {
		edges = append(edges, accounthistory.EdgeAccount)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountHistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case accounthistory.EdgeAccount:
		return m.clearedaccount
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountHistoryMutation) ClearEdge(name string) error {
	switch name {
	case accounthistory.EdgeAccount:
		m.ClearAccount()
		return nil
	}
	return fmt.Errorf("unknown AccountHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountHistoryMutation) ResetEdge(name string) error {
	switch name {
	case accounthistory.EdgeAccount:
		m.ResetAccount()
		return nil
	}
	return fmt.Errorf("unknown AccountHistory edge %s", name)
}
