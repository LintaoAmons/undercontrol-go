// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/LintaoAmons/undercontrol/ent/account"
	"github.com/LintaoAmons/undercontrol/ent/accounthistory"
	"github.com/LintaoAmons/undercontrol/ent/predicate"
)

// AccountHistoryUpdate is the builder for updating AccountHistory entities.
type AccountHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *AccountHistoryMutation
}

// Where appends a list predicates to the AccountHistoryUpdate builder.
func (ahu *AccountHistoryUpdate) Where(ps ...predicate.AccountHistory) *AccountHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetName sets the "name" field.
func (ahu *AccountHistoryUpdate) SetName(s string) *AccountHistoryUpdate {
	ahu.mutation.SetName(s)
	return ahu
}

// SetAmount sets the "amount" field.
func (ahu *AccountHistoryUpdate) SetAmount(s string) *AccountHistoryUpdate {
	ahu.mutation.SetAmount(s)
	return ahu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableAmount(s *string) *AccountHistoryUpdate {
	if s != nil {
		ahu.SetAmount(*s)
	}
	return ahu
}

// ClearAmount clears the value of the "amount" field.
func (ahu *AccountHistoryUpdate) ClearAmount() *AccountHistoryUpdate {
	ahu.mutation.ClearAmount()
	return ahu
}

// SetCurrencyCode sets the "currency_code" field.
func (ahu *AccountHistoryUpdate) SetCurrencyCode(s string) *AccountHistoryUpdate {
	ahu.mutation.SetCurrencyCode(s)
	return ahu
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableCurrencyCode(s *string) *AccountHistoryUpdate {
	if s != nil {
		ahu.SetCurrencyCode(*s)
	}
	return ahu
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (ahu *AccountHistoryUpdate) ClearCurrencyCode() *AccountHistoryUpdate {
	ahu.mutation.ClearCurrencyCode()
	return ahu
}

// SetCreatedAt sets the "created_at" field.
func (ahu *AccountHistoryUpdate) SetCreatedAt(t time.Time) *AccountHistoryUpdate {
	ahu.mutation.SetCreatedAt(t)
	return ahu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableCreatedAt(t *time.Time) *AccountHistoryUpdate {
	if t != nil {
		ahu.SetCreatedAt(*t)
	}
	return ahu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ahu *AccountHistoryUpdate) ClearCreatedAt() *AccountHistoryUpdate {
	ahu.mutation.ClearCreatedAt()
	return ahu
}

// SetCreatedBy sets the "created_by" field.
func (ahu *AccountHistoryUpdate) SetCreatedBy(s string) *AccountHistoryUpdate {
	ahu.mutation.SetCreatedBy(s)
	return ahu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableCreatedBy(s *string) *AccountHistoryUpdate {
	if s != nil {
		ahu.SetCreatedBy(*s)
	}
	return ahu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ahu *AccountHistoryUpdate) ClearCreatedBy() *AccountHistoryUpdate {
	ahu.mutation.ClearCreatedBy()
	return ahu
}

// SetUpdatedAt sets the "updated_at" field.
func (ahu *AccountHistoryUpdate) SetUpdatedAt(t time.Time) *AccountHistoryUpdate {
	ahu.mutation.SetUpdatedAt(t)
	return ahu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableUpdatedAt(t *time.Time) *AccountHistoryUpdate {
	if t != nil {
		ahu.SetUpdatedAt(*t)
	}
	return ahu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ahu *AccountHistoryUpdate) ClearUpdatedAt() *AccountHistoryUpdate {
	ahu.mutation.ClearUpdatedAt()
	return ahu
}

// SetUpdatedBy sets the "updated_by" field.
func (ahu *AccountHistoryUpdate) SetUpdatedBy(s string) *AccountHistoryUpdate {
	ahu.mutation.SetUpdatedBy(s)
	return ahu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableUpdatedBy(s *string) *AccountHistoryUpdate {
	if s != nil {
		ahu.SetUpdatedBy(*s)
	}
	return ahu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ahu *AccountHistoryUpdate) ClearUpdatedBy() *AccountHistoryUpdate {
	ahu.mutation.ClearUpdatedBy()
	return ahu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (ahu *AccountHistoryUpdate) SetAccountID(id int) *AccountHistoryUpdate {
	ahu.mutation.SetAccountID(id)
	return ahu
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (ahu *AccountHistoryUpdate) SetNillableAccountID(id *int) *AccountHistoryUpdate {
	if id != nil {
		ahu = ahu.SetAccountID(*id)
	}
	return ahu
}

// SetAccount sets the "account" edge to the Account entity.
func (ahu *AccountHistoryUpdate) SetAccount(a *Account) *AccountHistoryUpdate {
	return ahu.SetAccountID(a.ID)
}

// Mutation returns the AccountHistoryMutation object of the builder.
func (ahu *AccountHistoryUpdate) Mutation() *AccountHistoryMutation {
	return ahu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (ahu *AccountHistoryUpdate) ClearAccount() *AccountHistoryUpdate {
	ahu.mutation.ClearAccount()
	return ahu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AccountHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AccountHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AccountHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AccountHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahu *AccountHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accounthistory.Table, accounthistory.Columns, sqlgraph.NewFieldSpec(accounthistory.FieldID, field.TypeInt))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.Name(); ok {
		_spec.SetField(accounthistory.FieldName, field.TypeString, value)
	}
	if value, ok := ahu.mutation.Amount(); ok {
		_spec.SetField(accounthistory.FieldAmount, field.TypeString, value)
	}
	if ahu.mutation.AmountCleared() {
		_spec.ClearField(accounthistory.FieldAmount, field.TypeString)
	}
	if value, ok := ahu.mutation.CurrencyCode(); ok {
		_spec.SetField(accounthistory.FieldCurrencyCode, field.TypeString, value)
	}
	if ahu.mutation.CurrencyCodeCleared() {
		_spec.ClearField(accounthistory.FieldCurrencyCode, field.TypeString)
	}
	if value, ok := ahu.mutation.CreatedAt(); ok {
		_spec.SetField(accounthistory.FieldCreatedAt, field.TypeTime, value)
	}
	if ahu.mutation.CreatedAtCleared() {
		_spec.ClearField(accounthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ahu.mutation.CreatedBy(); ok {
		_spec.SetField(accounthistory.FieldCreatedBy, field.TypeString, value)
	}
	if ahu.mutation.CreatedByCleared() {
		_spec.ClearField(accounthistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ahu.mutation.UpdatedAt(); ok {
		_spec.SetField(accounthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ahu.mutation.UpdatedAtCleared() {
		_spec.ClearField(accounthistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ahu.mutation.UpdatedBy(); ok {
		_spec.SetField(accounthistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ahu.mutation.UpdatedByCleared() {
		_spec.ClearField(accounthistory.FieldUpdatedBy, field.TypeString)
	}
	if ahu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounthistory.AccountTable,
			Columns: []string{accounthistory.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounthistory.AccountTable,
			Columns: []string{accounthistory.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// AccountHistoryUpdateOne is the builder for updating a single AccountHistory entity.
type AccountHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountHistoryMutation
}

// SetName sets the "name" field.
func (ahuo *AccountHistoryUpdateOne) SetName(s string) *AccountHistoryUpdateOne {
	ahuo.mutation.SetName(s)
	return ahuo
}

// SetAmount sets the "amount" field.
func (ahuo *AccountHistoryUpdateOne) SetAmount(s string) *AccountHistoryUpdateOne {
	ahuo.mutation.SetAmount(s)
	return ahuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableAmount(s *string) *AccountHistoryUpdateOne {
	if s != nil {
		ahuo.SetAmount(*s)
	}
	return ahuo
}

// ClearAmount clears the value of the "amount" field.
func (ahuo *AccountHistoryUpdateOne) ClearAmount() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearAmount()
	return ahuo
}

// SetCurrencyCode sets the "currency_code" field.
func (ahuo *AccountHistoryUpdateOne) SetCurrencyCode(s string) *AccountHistoryUpdateOne {
	ahuo.mutation.SetCurrencyCode(s)
	return ahuo
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableCurrencyCode(s *string) *AccountHistoryUpdateOne {
	if s != nil {
		ahuo.SetCurrencyCode(*s)
	}
	return ahuo
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (ahuo *AccountHistoryUpdateOne) ClearCurrencyCode() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearCurrencyCode()
	return ahuo
}

// SetCreatedAt sets the "created_at" field.
func (ahuo *AccountHistoryUpdateOne) SetCreatedAt(t time.Time) *AccountHistoryUpdateOne {
	ahuo.mutation.SetCreatedAt(t)
	return ahuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *AccountHistoryUpdateOne {
	if t != nil {
		ahuo.SetCreatedAt(*t)
	}
	return ahuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ahuo *AccountHistoryUpdateOne) ClearCreatedAt() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearCreatedAt()
	return ahuo
}

// SetCreatedBy sets the "created_by" field.
func (ahuo *AccountHistoryUpdateOne) SetCreatedBy(s string) *AccountHistoryUpdateOne {
	ahuo.mutation.SetCreatedBy(s)
	return ahuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableCreatedBy(s *string) *AccountHistoryUpdateOne {
	if s != nil {
		ahuo.SetCreatedBy(*s)
	}
	return ahuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ahuo *AccountHistoryUpdateOne) ClearCreatedBy() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearCreatedBy()
	return ahuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ahuo *AccountHistoryUpdateOne) SetUpdatedAt(t time.Time) *AccountHistoryUpdateOne {
	ahuo.mutation.SetUpdatedAt(t)
	return ahuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *AccountHistoryUpdateOne {
	if t != nil {
		ahuo.SetUpdatedAt(*t)
	}
	return ahuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ahuo *AccountHistoryUpdateOne) ClearUpdatedAt() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearUpdatedAt()
	return ahuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ahuo *AccountHistoryUpdateOne) SetUpdatedBy(s string) *AccountHistoryUpdateOne {
	ahuo.mutation.SetUpdatedBy(s)
	return ahuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableUpdatedBy(s *string) *AccountHistoryUpdateOne {
	if s != nil {
		ahuo.SetUpdatedBy(*s)
	}
	return ahuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ahuo *AccountHistoryUpdateOne) ClearUpdatedBy() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearUpdatedBy()
	return ahuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (ahuo *AccountHistoryUpdateOne) SetAccountID(id int) *AccountHistoryUpdateOne {
	ahuo.mutation.SetAccountID(id)
	return ahuo
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (ahuo *AccountHistoryUpdateOne) SetNillableAccountID(id *int) *AccountHistoryUpdateOne {
	if id != nil {
		ahuo = ahuo.SetAccountID(*id)
	}
	return ahuo
}

// SetAccount sets the "account" edge to the Account entity.
func (ahuo *AccountHistoryUpdateOne) SetAccount(a *Account) *AccountHistoryUpdateOne {
	return ahuo.SetAccountID(a.ID)
}

// Mutation returns the AccountHistoryMutation object of the builder.
func (ahuo *AccountHistoryUpdateOne) Mutation() *AccountHistoryMutation {
	return ahuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (ahuo *AccountHistoryUpdateOne) ClearAccount() *AccountHistoryUpdateOne {
	ahuo.mutation.ClearAccount()
	return ahuo
}

// Where appends a list predicates to the AccountHistoryUpdate builder.
func (ahuo *AccountHistoryUpdateOne) Where(ps ...predicate.AccountHistory) *AccountHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AccountHistoryUpdateOne) Select(field string, fields ...string) *AccountHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AccountHistory entity.
func (ahuo *AccountHistoryUpdateOne) Save(ctx context.Context) (*AccountHistory, error) {
	return withHooks(ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AccountHistoryUpdateOne) SaveX(ctx context.Context) *AccountHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AccountHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AccountHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahuo *AccountHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AccountHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(accounthistory.Table, accounthistory.Columns, sqlgraph.NewFieldSpec(accounthistory.FieldID, field.TypeInt))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accounthistory.FieldID)
		for _, f := range fields {
			if !accounthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accounthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahuo.mutation.Name(); ok {
		_spec.SetField(accounthistory.FieldName, field.TypeString, value)
	}
	if value, ok := ahuo.mutation.Amount(); ok {
		_spec.SetField(accounthistory.FieldAmount, field.TypeString, value)
	}
	if ahuo.mutation.AmountCleared() {
		_spec.ClearField(accounthistory.FieldAmount, field.TypeString)
	}
	if value, ok := ahuo.mutation.CurrencyCode(); ok {
		_spec.SetField(accounthistory.FieldCurrencyCode, field.TypeString, value)
	}
	if ahuo.mutation.CurrencyCodeCleared() {
		_spec.ClearField(accounthistory.FieldCurrencyCode, field.TypeString)
	}
	if value, ok := ahuo.mutation.CreatedAt(); ok {
		_spec.SetField(accounthistory.FieldCreatedAt, field.TypeTime, value)
	}
	if ahuo.mutation.CreatedAtCleared() {
		_spec.ClearField(accounthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ahuo.mutation.CreatedBy(); ok {
		_spec.SetField(accounthistory.FieldCreatedBy, field.TypeString, value)
	}
	if ahuo.mutation.CreatedByCleared() {
		_spec.ClearField(accounthistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accounthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ahuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(accounthistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ahuo.mutation.UpdatedBy(); ok {
		_spec.SetField(accounthistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ahuo.mutation.UpdatedByCleared() {
		_spec.ClearField(accounthistory.FieldUpdatedBy, field.TypeString)
	}
	if ahuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounthistory.AccountTable,
			Columns: []string{accounthistory.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounthistory.AccountTable,
			Columns: []string{accounthistory.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}
