// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/LintaoAmons/undercontrol/ent/account"
	"github.com/LintaoAmons/undercontrol/ent/accounthistory"
)

// AccountHistoryCreate is the builder for creating a AccountHistory entity.
type AccountHistoryCreate struct {
	config
	mutation *AccountHistoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ahc *AccountHistoryCreate) SetName(s string) *AccountHistoryCreate {
	ahc.mutation.SetName(s)
	return ahc
}

// SetAmount sets the "amount" field.
func (ahc *AccountHistoryCreate) SetAmount(s string) *AccountHistoryCreate {
	ahc.mutation.SetAmount(s)
	return ahc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableAmount(s *string) *AccountHistoryCreate {
	if s != nil {
		ahc.SetAmount(*s)
	}
	return ahc
}

// SetCurrencyCode sets the "currency_code" field.
func (ahc *AccountHistoryCreate) SetCurrencyCode(s string) *AccountHistoryCreate {
	ahc.mutation.SetCurrencyCode(s)
	return ahc
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableCurrencyCode(s *string) *AccountHistoryCreate {
	if s != nil {
		ahc.SetCurrencyCode(*s)
	}
	return ahc
}

// SetCreatedAt sets the "created_at" field.
func (ahc *AccountHistoryCreate) SetCreatedAt(t time.Time) *AccountHistoryCreate {
	ahc.mutation.SetCreatedAt(t)
	return ahc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableCreatedAt(t *time.Time) *AccountHistoryCreate {
	if t != nil {
		ahc.SetCreatedAt(*t)
	}
	return ahc
}

// SetCreatedBy sets the "created_by" field.
func (ahc *AccountHistoryCreate) SetCreatedBy(s string) *AccountHistoryCreate {
	ahc.mutation.SetCreatedBy(s)
	return ahc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableCreatedBy(s *string) *AccountHistoryCreate {
	if s != nil {
		ahc.SetCreatedBy(*s)
	}
	return ahc
}

// SetUpdatedAt sets the "updated_at" field.
func (ahc *AccountHistoryCreate) SetUpdatedAt(t time.Time) *AccountHistoryCreate {
	ahc.mutation.SetUpdatedAt(t)
	return ahc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableUpdatedAt(t *time.Time) *AccountHistoryCreate {
	if t != nil {
		ahc.SetUpdatedAt(*t)
	}
	return ahc
}

// SetUpdatedBy sets the "updated_by" field.
func (ahc *AccountHistoryCreate) SetUpdatedBy(s string) *AccountHistoryCreate {
	ahc.mutation.SetUpdatedBy(s)
	return ahc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableUpdatedBy(s *string) *AccountHistoryCreate {
	if s != nil {
		ahc.SetUpdatedBy(*s)
	}
	return ahc
}

// SetID sets the "id" field.
func (ahc *AccountHistoryCreate) SetID(i int) *AccountHistoryCreate {
	ahc.mutation.SetID(i)
	return ahc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (ahc *AccountHistoryCreate) SetAccountID(id int) *AccountHistoryCreate {
	ahc.mutation.SetAccountID(id)
	return ahc
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (ahc *AccountHistoryCreate) SetNillableAccountID(id *int) *AccountHistoryCreate {
	if id != nil {
		ahc = ahc.SetAccountID(*id)
	}
	return ahc
}

// SetAccount sets the "account" edge to the Account entity.
func (ahc *AccountHistoryCreate) SetAccount(a *Account) *AccountHistoryCreate {
	return ahc.SetAccountID(a.ID)
}

// Mutation returns the AccountHistoryMutation object of the builder.
func (ahc *AccountHistoryCreate) Mutation() *AccountHistoryMutation {
	return ahc.mutation
}

// Save creates the AccountHistory in the database.
func (ahc *AccountHistoryCreate) Save(ctx context.Context) (*AccountHistory, error) {
	return withHooks(ctx, ahc.sqlSave, ahc.mutation, ahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahc *AccountHistoryCreate) SaveX(ctx context.Context) *AccountHistory {
	v, err := ahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahc *AccountHistoryCreate) Exec(ctx context.Context) error {
	_, err := ahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahc *AccountHistoryCreate) ExecX(ctx context.Context) {
	if err := ahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahc *AccountHistoryCreate) check() error {
	if _, ok := ahc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AccountHistory.name"`)}
	}
	return nil
}

func (ahc *AccountHistoryCreate) sqlSave(ctx context.Context) (*AccountHistory, error) {
	if err := ahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ahc.mutation.id = &_node.ID
	ahc.mutation.done = true
	return _node, nil
}

func (ahc *AccountHistoryCreate) createSpec() (*AccountHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountHistory{config: ahc.config}
		_spec = sqlgraph.NewCreateSpec(accounthistory.Table, sqlgraph.NewFieldSpec(accounthistory.FieldID, field.TypeInt))
	)
	if id, ok := ahc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ahc.mutation.Name(); ok {
		_spec.SetField(accounthistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ahc.mutation.Amount(); ok {
		_spec.SetField(accounthistory.FieldAmount, field.TypeString, value)
		_node.Amount = &value
	}
	if value, ok := ahc.mutation.CurrencyCode(); ok {
		_spec.SetField(accounthistory.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = &value
	}
	if value, ok := ahc.mutation.CreatedAt(); ok {
		_spec.SetField(accounthistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := ahc.mutation.CreatedBy(); ok {
		_spec.SetField(accounthistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = &value
	}
	if value, ok := ahc.mutation.UpdatedAt(); ok {
		_spec.SetField(accounthistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := ahc.mutation.UpdatedBy(); ok {
		_spec.SetField(accounthistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if nodes := ahc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounthistory.AccountTable,
			Columns: []string{accounthistory.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_accounthistory = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountHistoryCreateBulk is the builder for creating many AccountHistory entities in bulk.
type AccountHistoryCreateBulk struct {
	config
	builders []*AccountHistoryCreate
}

// Save creates the AccountHistory entities in the database.
func (ahcb *AccountHistoryCreateBulk) Save(ctx context.Context) ([]*AccountHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ahcb.builders))
	nodes := make([]*AccountHistory, len(ahcb.builders))
	mutators := make([]Mutator, len(ahcb.builders))
	for i := range ahcb.builders {
		func(i int, root context.Context) {
			builder := ahcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahcb *AccountHistoryCreateBulk) SaveX(ctx context.Context) []*AccountHistory {
	v, err := ahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcb *AccountHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcb *AccountHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ahcb.Exec(ctx); err != nil {
		panic(err)
	}
}
