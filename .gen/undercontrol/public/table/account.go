//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Account = newAccountTable("public", "account", "")

type accountTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	Amount       postgres.ColumnInteger
	CurrencyCode postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	CreatedBy    postgres.ColumnString
	UpdatedAt    postgres.ColumnTimestampz
	UpdatedBy    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountTable struct {
	accountTable

	EXCLUDED accountTable
}

// AS creates new AccountTable with assigned alias
func (a AccountTable) AS(alias string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountTable with assigned schema name
func (a AccountTable) FromSchema(schemaName string) *AccountTable {
	return newAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountTable with assigned table prefix
func (a AccountTable) WithPrefix(prefix string) *AccountTable {
	return newAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountTable with assigned table suffix
func (a AccountTable) WithSuffix(suffix string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountTable(schemaName, tableName, alias string) *AccountTable {
	return &AccountTable{
		accountTable: newAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAccountTableImpl("", "excluded", ""),
	}
}

func newAccountTableImpl(schemaName, tableName, alias string) accountTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		AmountColumn       = postgres.IntegerColumn("amount")
		CurrencyCodeColumn = postgres.StringColumn("currency_code")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		CreatedByColumn    = postgres.StringColumn("created_by")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		UpdatedByColumn    = postgres.StringColumn("updated_by")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, AmountColumn, CurrencyCodeColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, AmountColumn, CurrencyCodeColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn}
	)

	return accountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Amount:       AmountColumn,
		CurrencyCode: CurrencyCodeColumn,
		CreatedAt:    CreatedAtColumn,
		CreatedBy:    CreatedByColumn,
		UpdatedAt:    UpdatedAtColumn,
		UpdatedBy:    UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
